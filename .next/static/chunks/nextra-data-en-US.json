{"/chapter_2/examples":{"title":"Examples","data":{"":"a = 5 \r\n# a = variable \r\n# 5 = value \r\nprint(a) \noutput:\n5\na = 55.3\r\n#type(a)\r\nprint(type(a))\r\n# it is used to print the datatype name of the respected variable.\r\noutput:\n<class 'float'>\n_a = 6\r\nprint(_a)   # variable starts with _ is valid\noutput:\n6\n\r\n1a = 7\r\nprint(1a)  # variable is starts with numeric value\noutput:\n ERROR:\r\n  File \"<ipython-input-4-79158a133918>\", line 1\r\n    1a = 7\r\n     ^\r\nSyntaxError: invalid syntax\nHTML=10\r\nprint(HTML)\r\nhtml = 11\r\nprint(html)\r\nHtml = 12\r\nHtMl = 13\r\nHTML = 'abcd'\r\nprint(Html)\r\nprint(HtMl)\r\nprint(HTML)\r\n# It is case sensitive\n10\r\n11\r\n12\r\n13\r\nabcd\n\r\nif = 5\r\nprint(if)\n ERROR:\r\n  File \"<ipython-input-7-c1f5fb390a78>\", line 1\r\n    if = 5\r\n       ^\r\nSyntaxError: invalid syntax\nHTML=10\r\nprint(HTML)\r\nhtml = 11\r\nprint(html)\r\nprint(HTML)\n10\r\n11\r\n10\nprint(html)\r\nhtml = \"Priyanka\"\r\nprint(html)\r\n# we have already define html variable & assigned a value it to 11\r\n# but we are re-assigning a new value to same variable, \r\n# it will update automatically.\noutput:\nPriyanka\r\nPriyanka\nh+t = 3\r\nprint(h+t)  \r\n# + (special symbol) is not valid in variable declaratio\noutput:\n File \"<ipython-input-17-ff7d53261ea7>\", line 1\r\n    h+t = 3\r\n    ^\r\nSyntaxError: cannot assign to operator\nh_t = 2\r\nprint(h_t)   # _ is valid in variable declaration\noutput:\n2\ndef = 5   # def is keyword in python, & keyword is not valid\r\nprint(def)\r\n\r\n# Keywords = (Green + Bold + no bracket) \r\n# Ex: if, else, in, not in, break, continue, pass, etc.\r\n# Functions = (green + not bold + brackets)\r\n# Ex: type(), strip(), upper(), lower(), print(), etc.\noutput:\nERROR:  \r\nFile \"<ipython-input-19-0146e7eea934>\", line 1\r\n    def = 5   # def is keyword in python, & keyword is not valid\r\n        ^\r\nSyntaxError: invalid syntax\nn 9 = 5\r\nprint(n 9)   # space is not allowed in variable declaration\noutput:\nRanbir Kapoor\nprint(type(4653.4))\r\nprint(type('python'))\r\nprint(type(-6542434676986545789654667865787543245671))\r\n# to print variable type of value\noutput:\n<class 'float'>\r\n<class 'str'>\r\n<class 'int'>\na = 2\r\na\r\noutput:\n2\n# id()\r\n# =====\r\na = 2\r\nprint(id(a))\r\n# => it will give you the O/P of memory location where \r\n# the variable has been stored.\r\n# => Basically memory locations are in hexa decimal \r\n# format, but id() convert it into decimal format & display.\noutput:\n140732362536768\nz = 2\r\nprint(id(a))\r\n# => id's are dependent upon the values, value change => ID change\r\noutput:\n140732362536768\na = 3255\r\nb = a   # assign variable value to another variable\r\n#print(a,b) # We are printing multiple variables in same print statement.\r\nprint(a,b)\noutput:\n3255 3255\nprint(id(a)) # to get id of memory location where variable is initilized\r\nprint(id(b))\noutput:\n1493602807376\r\n1493602807376\na = 10\r\nprint(a)\r\nprint(id(a))\r\na = 'Python'\r\nprint(a)\r\nprint(id(a))\r\nb = 10\r\nprint(id(b))\r\n# Rule : whenever we update a new value to existing variable, it \r\n# will get the new id.\noutput:\n10\r\n140732362537024\r\nPython\r\n1493535579312\r\n140732362537024\na = [5,10,15]\r\nprint(a)\r\nprint(id(a))\r\nb = a.copy()\r\nprint(b)\r\nprint(id(b))\r\n# => copy() -> it is used to copy the data from 1 variable to another\r\n# => it will assign new memory location to the same values which \r\n# are present in different variable.\r\n# => copy() will not work on normal int / string values.\noutput:\n[5, 10, 15]\r\n1493603752576\r\n[5, 10, 15]\r\n1493602648768\na = [3254,123]\r\nb = a.copy()\r\nprint(b)\r\nprint(id(a))\r\nprint(id(b))\r\n# => copy() only works on list data.\noutput:\n[3254, 123]\r\n1493603753408\r\n1493602998080\r\n = 78\r\n# variable length can be anything\r\nprint()\noutput:\n78\n\r\ndel \r\n# => it is a keyword, used to delete a variable.\r\n# => it will free up the memory which has been used by \r\n# deleted variable.\r\n# => if variable have deleted successfully, still del keyword\r\n# will not notify you.\r\n# => So, to cross check whether that variable have deleted or not,\r\n# that time you just need to print same variable again. \r\n# If you are getting name error, then assume that variable have\r\n# been deleted successfully.\noutput:\n\r\n---------------------------------------------------------------------------\r\nNameError                                 Traceback (most recent call last)\r\n<ipython-input-47-49376f74d7bd> in <module>\r\n----> 1 del \r\n      2 # => it is a keyword, used to delete a variable.\r\n      3 # => it will free up the memory which has been used by\r\n      4 # deleted variable.\r\n      5 # => if variable have deleted successfully, still del keyword\r\n\r\nNameError: name '' is not defined\nprint()\noutput:\n\r\n---------------------------------------------------------------------------\r\nNameError                                 Traceback (most recent call last)\r\n<ipython-input-48-4a067bef166a> in <module>\r\n----> 1 print()\r\n\r\nNameError: name '' is not defined\r\n# Variable declaration types\r\nageRam = 28   # Camel Case\r\nAgeRam = 28   # Pascel Case\r\nage_ram = 28  # Snake Case\r\nprint(age_ram)\r\nprint(AgeRam)\r\n# ageRam & AgeRam both will be treated as different variable.\noutput:\n28\r\n28\np=q=r = 50    # multiple variable assigning same value\r\nprint(p,q,r)\r\nprint(q)\r\nprint(r)\r\nprint(id(p), id(q), id(r))\r\n# if we assign multiple variable to same value in above fashion,\r\n# its id's are also same, means it is pointing to same memory location.\noutput:\n50 50 50\r\n50\r\n50\r\n140732362538304 140732362538304 140732362538304\r\nx,y,z,a,b = 1,2,3,4,5\r\nprint(x,y,z,a,b)\r\n\r\nprint(id(x), id(y), id(z), id(a), id(b))\r\n\r\n# if we assign multiple variable to multiple value in above fashion, \r\n# its id's are not same, means it is pointing to different memory location.\noutput:\n1 2 3 4 5\r\n140732362536736 140732362536768 140732362536800 140732362536832 140732362536864\n# Q. Swip the values using 3rd variable\r\n# Value Swip Program = 1\r\nx = 5\r\ny = 10\r\n\r\n# create a temporary variable and swap the values\r\ntemp = x # 5\r\nx = y # 10\r\ny = temp  # 5\r\n\r\nprint(x)\r\nprint(y)\noutput:\n10\r\n5\nc = \r\ne = c*\r\nprint(e)\r\nprint(\"Type of E = \",type(e))\r\n# python has no number limit\noutput:\n\r\nType of E =  <class 'int'>\nx = 4156417895984516410641785684536861248756165\r\nz = 56415631475815287456\r\nz_x = x/z\r\nprint(z_x)\r\n# => everytime you will get O/P in float format \r\n# whenever you do division operation.\noutput:\n7.367493347595202e+22\n4/7\noutput:\n2.0\na=b=4\r\nc = 5\r\nprint(a,b,c)\r\nprint(id(a),id(b),id(c))\noutput:\n4 4 5\r\n140732362536832 140732362536832 140732362536864"}},"/chapter_2/multiple_var_dec":{"title":"Multiple Variables Declaration in Python","data":{"":"In Python, you can declare multiple variables in a single line. This can be done in a few different ways, including assigning the same value to multiple variables or assigning different values to each variable.","assigning-the-same-value-to-multiple-variables#Assigning the Same Value to Multiple Variables":"You can assign the same value to multiple variables in a single statement.\n# Assigning the same value to multiple variables\r\na = b = c = 10\r\nprint(\"a:\", a)\r\nprint(\"b:\", b)\r\nprint(\"c:\", c)\nOutput:\na: 10\r\nb: 10\r\nc: 10\nExplanation: The variables a, b, and c are all assigned the value 10.","assigning-different-values-to-multiple-variables#Assigning Different Values to Multiple Variables":"You can assign different values to multiple variables in a single line using tuple unpacking.\n# Assigning different values to multiple variables\r\nx, y, z = 1, 2, 3\r\nprint(\"x:\", x)\r\nprint(\"y:\", y)\r\nprint(\"z:\", z)\nOutput:\nx: 1\r\ny: 2\r\nz: 3\nExplanation: The variables x, y, and z are assigned the values 1, 2, and 3, respectively.","swapping-variables#Swapping Variables":"Python allows for easy swapping of variable values without needing a temporary variable.\n# Swapping variables\r\nm, n = 5, 10\r\nprint(\"Before swap - m:\", m, \"n:\", n)\r\n\r\nm, n = n, m\r\nprint(\"After swap - m:\", m, \"n:\", n)\nOutput:\nBefore swap - m: 5 n: 10\r\nAfter swap - m: 10 n: 5\nExplanation: The values of m and n are swapped in a single line using tuple unpacking.","multiple-variable-declarations-with-different-data-types#Multiple Variable Declarations with Different Data Types":"You can also declare multiple variables with different data types in a single line.\n# Declaring multiple variables with different data types\r\nname, age, is_student = \"Alice\", 20, True\r\nprint(\"Name:\", name)\r\nprint(\"Age:\", age)\r\nprint(\"Is Student:\", is_student)\nOutput:\nName: Alice\r\nAge: 20\r\nIs Student: True\nExplanation: The variables name, age, and is_student are assigned the values \"Alice\", 20, and True, respectively.","conclusion#Conclusion":"Declaring multiple variables in Python can simplify your code and improve readability. Whether you're assigning the same value, different values, or swapping values, Python's syntax makes these operations straightforward and efficient."}},"/chapter_2/types":{"title":"Types of Variable Declarations in Python","data":{"":"In Python, variables can hold different types of data. Here, we'll cover the main types of variable declarations, including examples, explanations, and their outputs.","1-integer#1. Integer":"An integer is a whole number without a fractional part.\n# Integer variable\r\nage = 25\r\nprint(\"Age:\", age)\nOutput:\nAge: 25\nExplanation: The variable age is assigned the integer value 25.","2-float#2. Float":"A float is a number with a decimal point or in exponential form.\n# Float variable\r\nheight = 5.9\r\nprint(\"Height:\", height)\nOutput:\nHeight: 5.9\nExplanation: The variable height is assigned the float value 5.9.","3-string#3. String":"A string is a sequence of characters enclosed in single quotes (' ') or double quotes (\" \").\n# String variable\r\nname = \"Alice\"\r\nprint(\"Name:\", name)\nOutput:\nName: Alice\nExplanation: The variable name is assigned the string value \"Alice\".","4-boolean#4. Boolean":"A boolean variable can hold one of two values: True or False.\n# Boolean variable\r\nis_active = True\r\nprint(\"Is Active:\", is_active)\nOutput:\nIs Active: True\nExplanation: The variable is_active is assigned the boolean value True.","5-list#5. List":"A list is an ordered collection of items, which can be of different types.\n# List variable\r\nfruits = [\"apple\", \"banana\", \"cherry\"]\r\nprint(\"Fruits:\", fruits)\nOutput:\nFruits: ['apple', 'banana', 'cherry']\nExplanation: The variable fruits is assigned a list containing three string elements.","6-tuple#6. Tuple":"A tuple is similar to a list but is immutable (cannot be changed after creation).\n# Tuple variable\r\ncoordinates = (10.0, 20.0)\r\nprint(\"Coordinates:\", coordinates)\nOutput:\nCoordinates: (10.0, 20.0)\nExplanation: The variable coordinates is assigned a tuple containing two float elements.","7-dictionary#7. Dictionary":"A dictionary is an unordered collection of key-value pairs.\n# Dictionary variable\r\nperson = {\r\n    \"name\": \"John\",\r\n    \"age\": 30,\r\n    \"is_employee\": True\r\n}\r\nprint(\"Person:\", person)\nOutput:\nPerson: {'name': 'John', 'age': 30, 'is_employee': True}\nExplanation: The variable person is assigned a dictionary with keys \"name\", \"age\", and \"is_employee\".","8-set#8. Set":"A set is an unordered collection of unique items.\n# Set variable\r\nunique_numbers = {1, 2, 3, 4, 5}\r\nprint(\"Unique Numbers:\", unique_numbers)\nOutput:\nUnique Numbers: {1, 2, 3, 4, 5}\nExplanation: The variable unique_numbers is assigned a set containing five unique integers.","conclusion#Conclusion":"Python provides a variety of ways to declare variables, each suited for different types of data. Understanding these types and how to use them is fundamental to effective programming in Python. By leveraging the appropriate variable type, you can write clearer and more efficient code."}},"/chapter_3":{"title":"Introduction to Operators in Python","data":{"":"Operators are special symbols in Python that are used to perform operations on variables and values. Python supports a variety of operators, each serving different purposes and providing unique functionalities. These operators can be categorized into several types:\nArithmetic Operators\nComparison (Relational) Operators\nAssignment Operators\nLogical Operators\nBitwise Operators\nMembership Operators\nIdentity Operators","1-arithmetic-operators#1. Arithmetic Operators":"Arithmetic operators are used to perform mathematical operations such as addition, subtraction, multiplication, and division.\nOperator\tDescription\tExample\t+\tAddition\ta + b\t-\tSubtraction\ta - b\t*\tMultiplication\ta * b\t/\tDivision\ta / b\t%\tModulus\ta % b\t**\tExponentiation\ta ** b\t//\tFloor Division\ta // b","2-comparison-relational-operators#2. Comparison (Relational) Operators":"Comparison operators are used to compare two values. They return either True or False based on the comparison.\nOperator\tDescription\tExample\t==\tEqual to\ta == b\t!=\tNot equal to\ta != b\t>\tGreater than\ta > b\t<\tLess than\ta < b\t>=\tGreater than or equal to\ta >= b\t<=\tLess than or equal to\ta <= b","3-assignment-operators#3. Assignment Operators":"Assignment operators are used to assign values to variables.\nOperator\tDescription\tExample\t=\tAssign\ta = b\t+=\tAdd and assign\ta += b\t-=\tSubtract and assign\ta -= b\t*=\tMultiply and assign\ta *= b\t/=\tDivide and assign\ta /= b\t%=\tModulus and assign\ta %= b\t//=\tFloor divide and assign\ta //= b\t**=\tExponentiate and assign\ta **= b\t&=\tBitwise AND and assign\ta &= b\t`\t=`\tBitwise OR"}}}