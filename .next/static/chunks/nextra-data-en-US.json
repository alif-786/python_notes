{"/chapter_4/all":{"title":"The all() Function in Python","data":{"":"The all() function in Python is a built-in function that returns True if all elements of an iterable (such as a list, tuple, set, etc.) are true. If the iterable is empty, it returns True (since there are no elements to evaluate).","syntax#Syntax":"all(iterable)\niterable: An iterable object (like a list, tuple, set, etc.) that contains the elements to check.","usage#Usage":"The all() function iterates over all elements of the iterable and returns True if all elements are truthy. If any element is falsy (or if the iterable is empty), it returns False.","examples#Examples":"","example-1-using-all-with-a-list#Example 1: Using all() with a List":"# Example 1: Using all() with a List\r\nnumbers = [1, 2, 3, 4, 5]\r\n\r\n# Check if all numbers in the list are greater than 0\r\nresult = all(num > 0 for num in numbers)\r\nprint(result)\nOutput:\nTrue\nExplanation:\nIn this example, the all() function checks if all numbers in the numbers list are greater than 0.\nSince all numbers in the list satisfy the condition (1, 2, 3, 4, 5 are all greater than 0), the all() function returns True.","example-2-using-all-with-a-list-containing-falsy-values#Example 2: Using all() with a List Containing Falsy Values":"# Example 2: Using all() with a List Containing Falsy Values\r\nvalues = [True, True, False, True]\r\n\r\n# Check if all values in the list are True\r\nresult = all(values)\r\nprint(result)\nOutput:\nFalse\nExplanation:\nIn this example, the all() function checks if all values in the values list are true.\nThe list contains True, True, False, True. Since not all values are True, the all() function returns False.","notes#Notes":"The all() function short-circuits; it stops as soon as it finds a falsy value, so it can be more efficient than manually checking each element.\nIt is particularly useful in conjunction with conditional expressions and comprehensions.\nThe all() function is a useful tool for quickly checking the truthiness of all elements in an iterable in Python.This Markdown format provides a clear explanation of the all() function in Python, along with examples and outputs, making it easier to understand how to use it effectively in your code. Adjustments can be made based on specific needs or preferences."}},"/chapter_4/if_else_scenarios":{"title":"If Else Scenarios","data":{"":"Certainly! Here are all the possible if-else scenarios presented using Mermaid diagrams in MDX format:","if-else-scenarios-in-diagram-form#If-Else Scenarios in Diagram Form":"","1-simple-if-else-statement#1. Simple if-else Statement":"","2-if-elif-else-statement#2. if-elif-else Statement":"","3-nested-if-else-statement#3. Nested if-else Statement":"","4-multiple-elif-statements#4. Multiple elif Statements":"","5-if-statement-without-else#5. if Statement without else":"","6-if-else-if-else-with-nested-conditions#6. if-else if-else with Nested Conditions":"These diagrams provide a comprehensive visual representation of different if-else scenarios, showcasing how conditions flow through various statements. You can adjust or expand these based on specific requirements or preferences."}},"/chapter_4/examples":{"title":"Examples","data":{"":"Certainly! Here's the conversion of your Python code examples into MDX format with explanations, examples, and outputs formatted for clarity:","decision-making-ifelse-statement#Decision Making (if...else Statement)":"","example-1-single-statement-suite#Example 1: Single Statement Suite":"var = 11001\r\n\r\nif (var == 1001): #1001==100\r\n    print(\"Automatically take indentation\")\r\n    print(\"Value of expression is 100\")\r\n    \r\nprint(\"Good bye!\")","output#Output:":"Good bye!","example-2-simple-ifelse-statement#Example 2: Simple if...else Statement":"x = 40\r\n\r\nif (x < 12):\r\n    print(\"40 is greater than 12\")\r\nelse:\r\n    print(\"40 is less than 12\")","output-1#Output:":"40 is less than 12","example-3-if-statement-without-else#Example 3: if Statement Without Else":"var = 100\r\n\r\nif (var == 1010):\r\n    print(\"Value of expression is 100\")\r\n\r\nprint(\"Good bye!\")","output-2#Output:":"Good bye!","example-4-conditional-voting-eligibility-check#Example 4: Conditional Voting Eligibility Check":"try:\r\n    age = float(input(\"Enter your age \"))\r\n    if (age >= 18 and age <= 100):\r\n        print(\"You can Vote\")\r\n    else:\r\n        print(\"You need to wait for voting\")\r\n    print(type(age))\r\nexcept ValueError:\r\n    print(\"Invalid age entered. Please enter a valid age.\")","output-3#Output:":"Enter your age Ronald\r\nValueError: could not convert string to float: 'Ronald'","example-5-basic-input-and-output#Example 5: Basic Input and Output":"a = input(\"Enter your age \")\r\nprint(a)\r\nprint(type(a))","output-4#Output:":"Enter your age 40\r\n40\r\n<class 'str'>","example-6-checking-even-or-odd-number#Example 6: Checking Even or Odd Number":"num = int(input(\"Enter the number? \"))\r\nif num % 2 == 0:\r\n    print(\"Number is Even\")\r\nelse:\r\n    print(\"Number is Odd\")","output-5#Output:":"Enter the number? 5\r\nNumber is Odd","example-7-finding-the-largest-of-three-numbers#Example 7: Finding the Largest of Three Numbers":"a = int(input(\"Enter a? \"))\r\nb = int(input(\"Enter b? \"))\r\nc = int(input(\"Enter c? \"))\r\n\r\nif a > b and a > c:\r\n    print(\"a is largest\")\r\nif b > a and b > c:\r\n    print(\"b is largest\")\r\nif c > a and c > b:\r\n    print(\"c is largest\")","output-6#Output:":"Enter a? 4\r\nEnter b? 4\r\nEnter c? 5\r\nc is largest","example-8-finding-the-smallest-of-three-numbers#Example 8: Finding the Smallest of Three Numbers":"a = int(input(\"Enter a? \"))\r\nb = int(input(\"Enter b? \"))\r\nc = int(input(\"Enter c? \"))\r\n\r\nif a < b and a < c:\r\n    print(\"a is lowest\")\r\nif b < a and b < c:\r\n    print(\"b is lowest\")\r\nif c < a and c < b:\r\n    print(\"c is lowest\")","output-7#Output:":"Enter a? 10\r\nEnter b? 18\r\nEnter c? 16\r\na is lowest","example-9-boolean-values-in-ifelse#Example 9: Boolean Values in if...else":"var1 = -10\r\nif var1:\r\n    print(\"1 - Got a true expression value\")\r\n    print(var1)\r\nelse:\r\n    print(\"1 - Got a false expression value\")\r\n    print(var1)\r\n\r\nvar2 = 0\r\nif var2:\r\n    print(\"2 - Got a true expression value\")\r\n    print(var2)\r\nelse:\r\n    print(\"False\")\r\n    print(var2)\r\n\r\nprint(\"Good bye!\")","output-8#Output:":"1 - Got a true expression value\r\n-10\r\nFalse\r\n0\r\nGood bye!","example-10-nested-if-statements#Example 10: Nested if Statements":"var = 157\r\nif var < 400:\r\n    print(\"Expression value is less than 200\")\r\n    if var <= 150:\r\n        print (\"Which is 150\")\r\n    elif var == 100:\r\n        print (\"Which is 100\")\r\n    elif var == 50:\r\n        print (\"Which is 50\")\r\n    elif var < 50:\r\n        print(\"Expression value is less than 50\")\r\n    else:\r\n        print(\"Nothing\")\r\nelse:\r\n    print(\"Could not find true expression\")\r\n\r\nprint(\"Good bye!\")","output-9#Output:":"Expression value is less than 200\r\nWhich is 150\r\nGood bye!","example-11-grading-based-on-percentage#Example 11: Grading based on Percentage":"marks = float(input(\"Enter the Percentage? \"))\r\n\r\nif marks > 85 and marks <= 100:\r\n    print(\"Congrats! You have scored grade A ...\")\r\nelif marks > 60 and marks <= 85:\r\n    print(\"You have scored grade B + ...\")\r\nelif marks > 40 and marks <= 60:\r\n    print(\"You have scored grade B ...\")\r\nelif marks > 30 and marks <= 40:\r\n    print(\"You have scored grade C ...\")\r\nelif marks > 100:\r\n    print(\"Invalid\")\r\nelse:\r\n    print(\"Sorry, you have failed..\")","output-10#Output:":"Enter the Percentage? 78\r\nYou have scored grade B + ...","ternary-operator#Ternary Operator":"","explanation#Explanation":"The ternary operator is a shorthand for an if-else statement. The syntax is value_if_true if condition else value_if_false. It's a one-liner that can replace a multi-line if-else statement, making your code more concise.","example-12-using-ternary-operator#Example 12: Using Ternary Operator":"a = 50\r\nb = 10\r\nmax = a if a > b else b\r\nprint(max)","output-11#Output:":"50","example-13-nested-ternary-operator#Example 13: Nested Ternary Operator":"a, b = 10, 20\r\nprint(\"Both a and b are equal\" if a == b else \"a is greater than b\" if a > b else \"b is greater than a\")","output-12#Output:":"b is greater than a","example-14-using-nested-if-statements-equivalent-to-example-13#Example 14: Using Nested if Statements (Equivalent to Example 13)":"a, b = 10, 20\r\nif a == b:\r\n    print(\"Both a and b are equal\")\r\nelse:\r\n    if a > b:\r\n        print(\"a is greater than b\")\r\n    else:\r\n        print(\"b is greater than a\")","output-13#Output:":"b is greater than a","example-15-using-nested-ifelse-statements#Example 15: Using Nested if...else Statements":"a, b = 10, 20\r\n\r\nif a != b:\r\n    if a > b:\r\n        print(\"a is greater than b\")\r\n    else:\r\n        print(\"b is greater than a\")\r\nelse:\r\n    print(\"Both a and b are equal\")","output-14#Output:":"b is greater than a","example-16-conditional-expression-using-ternary-operator#Example 16: Conditional Expression using Ternary Operator":"a = 5\r\nb = 7\r\n\r\nresult = (str(a) + \" is greater\") if (a > b) else (str(b) + \" is Greater\")\r\nprint(result)","output-15#Output:":"7 is Greater","example-17-shortest-value-in-ternary-operator#Example 17: Shortest Value in Ternary Operator":"a, b = 2, 20\r\nmin = a < b and a or b\r\nprint(min)","output-16#Output:":"2","example-18-largest-value-in-ternary-operator#Example 18: Largest Value in Ternary Operator":"a, b = 2, 20\r\nmax = a > b and a or b\r\nprint(max)","output-17#Output:":"20\nThese examples cover various scenarios of using if...else statements and ternary operators in Python, demonstrating their usage and expected outputs."}},"/chapter_4/type_of_values":{"title":"Type of Values","data":{"predefined-values-in-python#Predefined Values in Python":"Predefined values in Python are built-in constants and types that come with the language. These values are always available and provide fundamental functionality.","boolean-values-true-false#Boolean Values: True, False":"Boolean values represent truth values and are commonly used in conditional statements and expressions.Example:\nprint(True)   # Output: True\r\nprint(False)  # Output: False","none#None":"None represents the absence of a value or a null value. It is often used to signify 'nothing' or 'no value here'.Example:\nprint(None)   # Output: None","numeric-types-int-float#Numeric Types: int, float":"Numeric types include integers (int) and floating-point numbers (float). These are used for mathematical calculations and representing numeric data.Example:\nprint(42)     # Output: 42\r\nprint(3.14)   # Output: 3.14","sequences-str-list#Sequences: str, list":"Sequences include strings (str) and lists (list). Strings are used for text data, while lists are used to store collections of items.Example:\nprint(\"hello\")        # Output: hello\r\nprint([1, 2, 3])      # Output: [1, 2, 3]","summary#Summary":"Boolean Values: True, False - Represent truth values.\nNone: Represents the absence of a value.\nNumeric Types: int, float - Represent integers and floating-point numbers.\nSequences: str, list - Represent text data and collections of items.","user-defined-values-in-python#user-defined Values in Python":"It means we are asking to enter any type of value to the user at a runtaime. These values are not pre-defined for this purpose we need to use one function called as input()","input-function-in-python#input() Function in Python":"The input() function in Python allows you to accept user input. It reads a line from input, converts it into a string (stripping a trailing newline), and returns that. This function is primarily used in console-based programs where the user enters text or numeric data.","example#Example":"# Prompting the user for their name\r\nname = input(\"Enter your name: \")\r\n\r\n# Prompting the user for their age\r\nage = input(\"Enter your age: \")\r\n\r\n# Displaying the entered values\r\nprint(f\"Hello, {name}! You are {age} years old.\")","output#Output":"Enter your name: John\r\nEnter your age: 30\r\nHello, John! You are 30 years old.","explanation#Explanation":"Prompting for Input: The input() function takes a prompt (a string) as an argument. This prompt is displayed to the user before input is taken.\nUser Input: The user enters their response in the console. Here, \"John\" and \"30\" are entered as the name and age respectively.\nString Conversion: The input from input() is returned as a string. If you need to work with a different type (like an integer or float), you'll need to convert it explicitly using int() or float().\nOutput: The program then uses print() to display a message that includes the user's entered name and age.","notes#Notes":"String Input: The input() function always returns a string, so you may need to convert it to a numeric type (like int or float) if you want to perform calculations.\nUser Interaction: input() allows for interactive use of your program, making it more dynamic and responsive.\nThis example demonstrates the basic usage of input() to get user input and how to incorporate that input into a message for output."}}}